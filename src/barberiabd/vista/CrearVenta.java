/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package barberiabd.vista;

import barberiabd.controlador.Conexion;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

/**
 *
 * @author Andrea Calderon
 */
public class CrearVenta extends javax.swing.JFrame {

    static int idVenta;
    static int idCliente;
    static int idCorte;
    static int idBarbero;
    static int costo;
    static int propina;
    static int costoTotal;
    static boolean ocurreError, invOk;
    static int idProducto1, idProducto2, idProducto3;
    java.util.Date date = new java.util.Date();
    long tiempo = date.getTime();
    java.sql.Timestamp tiemposql = new java.sql.Timestamp(tiempo);

    public CrearVenta() {
        initComponents();
        setResizable(false);
        setSize(425, 440);
        setTitle("Registrar una nueva venta");
        setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.decode("#dbdccd"));
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        crear_btn = new javax.swing.JButton();
        salir_btn = new javax.swing.JButton();
        idVenta_TF = new javax.swing.JTextField();
        costo_TF = new javax.swing.JTextField();
        propina_TF = new javax.swing.JTextField();
        crearCliente_btn = new javax.swing.JButton();
        crearBarbero_btn = new javax.swing.JButton();
        idCliente_TF = new javax.swing.JTextField();
        idCorte_TF = new javax.swing.JTextField();
        idBarbero_TF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(450, 420));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Vector.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 80, 70));

        jLabel1.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel1.setText("Ingrese id de la venta:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jLabel3.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel3.setText("Ingrese el id del barbero:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel4.setText("Ingrese el id del cliente:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jLabel5.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel5.setText("Ingrese la propina (si aplica):");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        jLabel6.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel6.setText("Ingrese el id del corte:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        jLabel9.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        jLabel9.setText("Ingrese el costo :");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));

        crear_btn.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        crear_btn.setText("Crear Venta");
        crear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_btnActionPerformed(evt);
            }
        });
        getContentPane().add(crear_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 340, -1, -1));

        salir_btn.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        salir_btn.setText("Salir");
        salir_btn.setMaximumSize(new java.awt.Dimension(105, 27));
        salir_btn.setMinimumSize(new java.awt.Dimension(105, 27));
        salir_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir_btnActionPerformed(evt);
            }
        });
        getContentPane().add(salir_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 340, 80, -1));

        idVenta_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        getContentPane().add(idVenta_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 110, -1));

        costo_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        costo_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costo_TFActionPerformed(evt);
            }
        });
        getContentPane().add(costo_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 110, -1));

        propina_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        getContentPane().add(propina_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 110, -1));

        crearCliente_btn.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        crearCliente_btn.setText("Crear Cliente");
        crearCliente_btn.setMaximumSize(new java.awt.Dimension(150, 27));
        crearCliente_btn.setMinimumSize(new java.awt.Dimension(150, 27));
        crearCliente_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearCliente_btnActionPerformed(evt);
            }
        });
        getContentPane().add(crearCliente_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 120, 30));

        crearBarbero_btn.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        crearBarbero_btn.setText("Crear Barbero");
        crearBarbero_btn.setMaximumSize(new java.awt.Dimension(150, 27));
        crearBarbero_btn.setMinimumSize(new java.awt.Dimension(150, 27));
        crearBarbero_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearBarbero_btnActionPerformed(evt);
            }
        });
        getContentPane().add(crearBarbero_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 280, 130, 30));

        idCliente_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        getContentPane().add(idCliente_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 110, -1));

        idCorte_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        getContentPane().add(idCorte_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 110, -1));

        idBarbero_TF.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        getContentPane().add(idBarbero_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, 110, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salir_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir_btnActionPerformed
        dispose();
        Administrador retorno = new Administrador();
        retorno.setVisible(true);
    }//GEN-LAST:event_salir_btnActionPerformed

    private void crear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_btnActionPerformed
        ocurreError = false;
        if (estaVacio(idVenta_TF) || noEsNumero(idVenta_TF.getText())) {
            mensajeError("Ingrese el id de la venta, recuerde que debe ser un número");
            ocurreError = true;
        } else {
            idVenta = Integer.parseInt(idVenta_TF.getText());
            if (encuentraId("venta", "id", idVenta)) {
                mensajeError("El id de la venta ya existe");
                ocurreError = true;
            }
        }
        if (estaVacio(idCliente_TF) || noEsNumero(idCliente_TF.getText())) {
            mensajeError("Ingrese el id del cliente, recuerde que debe ser un número");
            ocurreError = true;
        } else {
            idCliente = Integer.parseInt(idCliente_TF.getText());
            if (!encuentraId("cliente", "id", idCliente)) {
                mensajeError("El cliente no existe");
                ocurreError = true;
            }
        }
        if (estaVacio(idCorte_TF) || noEsNumero(idCorte_TF.getText())) {
            mensajeError("Ingrese el id del corte, recuerde que debe ser un número");
            ocurreError = true;
        } else {
            idCorte = Integer.parseInt(idCorte_TF.getText());
            if (!encuentraId("corte", "codigo", idCorte)) {
                mensajeError("El corte no existe");
                ocurreError = true;
            }
        }
        if (estaVacio(idBarbero_TF) || noEsNumero(idBarbero_TF.getText())) {
            mensajeError("Ingrese el id del barbero, recuerde que debe ser un número");
            ocurreError = true;
        } else {
            idBarbero = Integer.parseInt(idBarbero_TF.getText());
            if (!encuentraId("barbero", "id", idBarbero)) {
                mensajeError("El Barbero no existe");
                ocurreError = true;
            }
        }
        if (estaVacio(costo_TF) || noEsNumero(costo_TF.getText())) {
            mensajeError("Ingrese el costo, recuerde que debe ser un número");
            ocurreError = true;
        } else {
            costo = Integer.parseInt(costo_TF.getText());
        }
        if (estaVacio(propina_TF)) {
            costoTotal = costo;
        } else if (noEsNumero(propina_TF.getText())) {
            mensajeError("recuerde que la propina debe ser un número");
            ocurreError = true;
        } else {
            propina = Integer.parseInt(propina_TF.getText());
            costoTotal = propina + costo;
        }

        if (!ocurreError) {

            //VERIFICACIÓN DE INVENTARIO 
            //PRODUCTO 1
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement("select productoObligatorio1, productoObligatorio2, extra "
                        + " from corte where codigo = '" + idCorte
                        + "'");
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    idProducto1 = Integer.parseInt(rs.getString("productoObligatorio1"));
                    idProducto2 = Integer.parseInt(rs.getString("productoObligatorio2"));
                    idProducto3 = Integer.parseInt(rs.getString("extra"));
                    if (quitarProducto(idProducto1)) {
                        if (quitarProducto(idProducto2)) {
                            if (idProducto3 != 0) {
                                if (quitarProducto(idProducto3)) {
                                    invOk = true;
                                } else {
                                    invOk = false;
                                }
                            } else {
                                invOk = true;
                            }
                        } else {
                            invOk = false;
                        }
                    } else {
                        invOk = false;
                    }

                } else {
                    invOk = false;
                }

            } catch (SQLException e) {
                System.err.println("Error scar porce" + e);
                JOptionPane.showMessageDialog(null, "Error al registrar, contacte al desarrollador.");
                invOk = false;

            }

            if (invOk) {
                int porcentaje = 0;
                try {
                    try {
                        Connection cn = Conexion.conectar();
                        PreparedStatement pst = cn.prepareStatement("select porcentajeComision from barbero where id = '" + idBarbero
                                + "'");
                        ResultSet rs = pst.executeQuery();
                        if (rs.next()) {
                            porcentaje = Integer.parseInt(rs.getString("porcentajeComision"));
                        }

                    } catch (SQLException e) {
                        System.err.println("Error scar porce" + e);
                        JOptionPane.showMessageDialog(null, "Error al registrar, contacte al desarrollador.");

                    }
                    Connection cn2 = Conexion.conectar();
                    PreparedStatement pst2 = cn2.prepareStatement(
                            "insert into venta values (?,?,?,?,?,?,?,?)"); //Se agregan los datos a la base de datos

                    pst2.setInt(1, idVenta);
                    pst2.setInt(2, idCorte);
                    pst2.setTimestamp(3, tiemposql);
                    pst2.setInt(4, idCliente);
                    pst2.setInt(5, idBarbero);
                    pst2.setInt(6, costo);
                    pst2.setInt(7, propina);
                    pst2.setInt(8, porcentaje);

                    pst2.executeUpdate();
                    cn2.close();

                    JOptionPane.showMessageDialog(null, "Registro exitoso");

                } catch (SQLException e) {
                    System.err.println("Error en registrar" + e);
                    JOptionPane.showMessageDialog(null, "Error al registrar, contacte al desarrollador.");
                }
            }
        }


    }//GEN-LAST:event_crear_btnActionPerformed

    private void costo_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costo_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_costo_TFActionPerformed

    private void crearBarbero_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearBarbero_btnActionPerformed
        dispose();
        CrearMiembro miembro = new CrearMiembro();
        miembro.setVisible(true);
    }//GEN-LAST:event_crearBarbero_btnActionPerformed

    private void crearCliente_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearCliente_btnActionPerformed
        dispose();
        CrearCliente cliente = new CrearCliente();
        cliente.setVisible(true);
    }//GEN-LAST:event_crearCliente_btnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costo_TF;
    private javax.swing.JButton crearBarbero_btn;
    private javax.swing.JButton crearCliente_btn;
    private javax.swing.JButton crear_btn;
    private javax.swing.JTextField idBarbero_TF;
    private javax.swing.JTextField idCliente_TF;
    private javax.swing.JTextField idCorte_TF;
    private javax.swing.JTextField idVenta_TF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField propina_TF;
    private javax.swing.JButton salir_btn;
    // End of variables declaration//GEN-END:variables

    public void Limpiar() {

    }

    private static boolean noEsNumero(String cadena) {
        try {
            Integer.parseInt(cadena);
            return false;
        } catch (NumberFormatException nfe) {
            return true;
        }
    }

    private static boolean estaVacio(JTextField TF) {
        if (TF.getText().length() == 0) {
            return true;
        } else {
            return false;
        }
    }

    private static void mensajeError(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje);
    }

    private static boolean encuentraId(String tabla, String nombreId, int id) {
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select " + nombreId + " from " + tabla + " where " + nombreId + " = '" + id
                    + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                return true;

            } else {
                return false;
            }
        } catch (SQLException e) {
            return false;
        }
    }

    //Este método quita una unidad del inventario del producto ingresado, si este proceso falla retorna false.
    private static boolean quitarProducto(int idProducto) {
        int idProveedor = 0, cantidadInventario, cantidadTotal;
        try {
            Connection cn2 = Conexion.conectar();
            PreparedStatement pst2 = cn2.prepareStatement("select codigoProducto, codigoProveedor, cantidad from inventario where codigoProducto = '" + idProducto + "'");
            ResultSet rs2 = pst2.executeQuery();
            if (rs2.next()) {
                cantidadInventario = Integer.parseInt(rs2.getString("cantidad"));
                cantidadTotal = cantidadInventario - 1;
                idProveedor = Integer.parseInt(rs2.getString("codigoProveedor"));

                if (cantidadTotal >= 0) {
                    try {
                        Connection cn = Conexion.conectar();
                        PreparedStatement pst = cn.prepareStatement("UPDATE inventario SET codigoProducto = ?, codigoProveedor = ?, cantidad =? where codigoProducto = '" + idProducto + "'");

                        pst.setInt(1, idProducto);
                        pst.setInt(2, idProveedor);
                        pst.setInt(3, cantidadTotal);

                        pst.executeUpdate();
                        cn.close();
                        return true;
                    } catch (SQLException e) {
                        System.err.print("Error en actualizar inventario" + e);
                        JOptionPane.showMessageDialog(null, "Error al actualizar el inventario, contacte al desarrollador");
                    }
                    cn2.close();
                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad del producto " + idProducto + " en el inventario debe ser mayor o igual a 1 ");
                }
            }
        } catch (SQLException e) {
            System.err.print("Error en actualizar inventario" + e);
            JOptionPane.showMessageDialog(null, "Error al actualizar el inventario, contacte al desarrollador");
        }
        return false;
    }
}
